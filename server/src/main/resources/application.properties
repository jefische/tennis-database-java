spring.application.name=server
# 8080 is the default port
# server.port=8080
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Adding this line specifies that Hibernate should create the database schema using the entities
# and specified column values in my Account and Message classes. Note my data.dql file should
# not have any Create or DROP statements if I'm asking Hibernate to create them, otherwise I'm just deleting them 
# and creating my own, which is okay but redundant. Set this to none, or remove it if I want to create the tables
# inside of data.sql. If letting Hibernate create the tables, make sure my INSERT statements specific the column names
# rather than assuming the order of insertion. This was causing errors previously on the message table.
spring.jpa.hibernate.ddl-auto=create


# Initialization also needs to be true for Hibernate to initialize the database.
spring.jpa.defer-datasource-initialization=true

# The create-drop option will recreate tables on each startup, and spring.sql.init.mode=always ensures your SQL files are executed.
spring.sql.init.mode=always

# Physical Naming Strategy: Controls how the final database column/table names are generated (e.g., converts videoId to video_id or keeps it as videoId)
# Without the physical naming strategy an error will be thrown:
# The error indicates that H2 database is looking for a column named "VIDEOID" (uppercase) but your entity defines it as "videoId" (camelCase). This is a common issue with H2's default naming strategy.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Implicit Naming Strategy: Controls how property names are mapped when no explicit @Column annotation is used
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl


# When set to true, Spring Boot automatically configures and starts the H2 console web interface, making it accessible via your browser.
# The H2 console becomes available at: http://localhost:8080/h2-console

# Connect to your database using the connection details from your application.properties:
# JDBC URL: jdbc:h2:mem:testdb
# User Name: sa
# Password: password
# Driver Class: org.h2.Driver
# What you can do in the console:
# View your tables: You'll see the ACCOUNT and MESSAGE tables created by Hibernate
# Check test data: View the test data inserted from your data.sql file
# Run queries: Execute SQL like:
# Debug data issues: Helpful for troubleshooting test failures or data problems

# This should typically only be enabled in development/testing environments. For production applications, you should set to false.
spring.h2.console.enabled=true


# Show SQL statements
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true